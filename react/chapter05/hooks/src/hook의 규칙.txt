1. hooks의 규칙
 hooks를 사용할 때는 버그나 예기치 못한 동작을 방지하기 위해 염두해
 둬야하는 몇가지 규칙이 있다.
1-1. hooks는 컴포넌트의 영역 안에서만 작동한다.
 리액트 컴포넌트 내부에서만 hooks를 호출해야 한다. hooks는 일반
 자바스크립트가 아니라 리액트 패턴이다.
1-2. 기능을 여러 hook으로 나누면 좋다.
 앞에서 본 JazzyNews 컴포넌트의 경우 구독과 관련한 모든 기능을 한 효과에, 사운드와 관련한 모든 기능을 다른 효과에 넣었다. 이렇게 하니까 바로 코드가
 읽기 쉬워졌는데, 효과를 분리하면 그 외에 다른 이점도 있다.
1-3. 최상위 수준에서만 hook을 사용해야 한다.
 조건문이나 루프, 내포된 함수 안에서 hook을 사용해서는 안된다.
 if(count>5){
	const [checked,toggle]=useState(false)
	if(count>5){
		useEffect(()=>{
			...
		})
	}
 }
 리액트에서 조건을 사용하려면 hook안에 if나 다른 조건을 내포시킬 수 있다.
 const [checked,toggle]=useState(
	count=>(count<5)?undefined:true
 )
 useEffect(()=>{
	if(count<5) return
		...
 })